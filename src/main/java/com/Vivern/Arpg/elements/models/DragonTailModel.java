//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Admin\Desktop\stuff\asbtractrpg\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

package com.Vivern.Arpg.elements.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;

public class DragonTailModel extends ModelBase {
   public ModelRenderer staf;
   public ModelRenderer pike;
   public ModelRenderer pike2;
   public ModelRenderer shape;
   public ModelRenderer crystal;
   public ModelRenderer crystal_1;
   public ModelRenderer crystal_2;
   public ModelRenderer crystal_3;
   public ModelRenderer crystal_4;
   public ModelRenderer crystal_5;
   public ModelRenderer staf2;
   public ModelRenderer staf2_1;

   public DragonTailModel() {
      this.textureWidth = 16;
      this.textureHeight = 32;
      this.staf2 = new ModelRenderer(this, 0, 14);
      this.staf2.setRotationPoint(0.0F, 22.6F, 5.0F);
      this.staf2.addBox(-1.0F, 0.0F, -1.0F, 2, 7, 2, 0.0F);
      this.setRotateAngle(this.staf2, -0.18203785F, 0.0F, 0.0F);
      this.crystal_4 = new ModelRenderer(this, 0, 0);
      this.crystal_4.setRotationPoint(-1.0F, -0.9F, 4.9F);
      this.crystal_4.addBox(-0.5F, 0.0F, -0.5F, 1, 4, 1, 0.0F);
      this.setRotateAngle(this.crystal_4, -2.6406832F, -0.13665928F, -1.5025539F);
      this.pike = new ModelRenderer(this, 4, 0);
      this.pike.setRotationPoint(0.0F, -4.0F, 5.0F);
      this.pike.addBox(-0.5F, -8.0F, -0.5F, 1, 4, 1, 0.0F);
      this.crystal_1 = new ModelRenderer(this, 0, 0);
      this.crystal_1.setRotationPoint(1.0F, -0.9F, 5.5F);
      this.crystal_1.addBox(-0.5F, 0.0F, 0.0F, 1, 3, 1, 0.0F);
      this.setRotateAngle(this.crystal_1, 2.7317894F, 1.0016445F, 0.95609134F);
      this.crystal_2 = new ModelRenderer(this, 0, 0);
      this.crystal_2.setRotationPoint(0.6F, 0.1F, 4.9F);
      this.crystal_2.addBox(-0.5F, 0.0F, 0.0F, 1, 2, 1, 0.0F);
      this.setRotateAngle(this.crystal_2, 3.0504866F, -2.1855013F, 2.003289F);
      this.staf2_1 = new ModelRenderer(this, 0, 23);
      this.staf2_1.setRotationPoint(0.0F, 27.6F, 4.0F);
      this.staf2_1.addBox(-1.0F, -0.6F, -1.0F, 2, 7, 2, 0.0F);
      this.setRotateAngle(this.staf2_1, -0.5462881F, 0.0F, 0.0F);
      this.pike2 = new ModelRenderer(this, 4, 2);
      this.pike2.setRotationPoint(0.0F, -4.0F, 5.0F);
      this.pike2.addBox(-0.5F, -3.3F, -0.5F, 1, 2, 1, 0.0F);
      this.staf = new ModelRenderer(this, 8, 0);
      this.staf.setRotationPoint(0.0F, 6.4F, 5.0F);
      this.staf.addBox(-1.0F, -8.0F, -1.0F, 2, 30, 2, 0.0F);
      this.crystal = new ModelRenderer(this, 0, 0);
      this.crystal.setRotationPoint(1.0F, -1.9F, 5.2F);
      this.crystal.addBox(-0.5F, 0.0F, 0.0F, 1, 4, 1, 0.0F);
      this.setRotateAngle(this.crystal, (float) -Math.PI, 0.7740535F, 0.7740535F);
      this.crystal_5 = new ModelRenderer(this, 0, 0);
      this.crystal_5.setRotationPoint(-0.3F, 0.1F, 4.8F);
      this.crystal_5.addBox(-0.5F, 0.0F, 0.0F, 1, 2, 1, 0.0F);
      this.setRotateAngle(this.crystal_5, (float) (-Math.PI / 3), -1.6845918F, 1.9577358F);
      this.shape = new ModelRenderer(this, 0, 6);
      this.shape.setRotationPoint(0.0F, 2.5F, 5.0F);
      this.shape.addBox(-1.0F, -8.0F, -1.0F, 2, 6, 2, 0.0F);
      this.crystal_3 = new ModelRenderer(this, 0, 0);
      this.crystal_3.setRotationPoint(-1.0F, -1.9F, 5.1F);
      this.crystal_3.addBox(-0.5F, 0.0F, 0.0F, 1, 4, 1, 0.0F);
      this.setRotateAngle(this.crystal_3, -0.22759093F, -1.3203416F, 2.4586453F);
   }

   public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.staf2.offsetX, this.staf2.offsetY, this.staf2.offsetZ);
      GlStateManager.translate(this.staf2.rotationPointX * f5, this.staf2.rotationPointY * f5, this.staf2.rotationPointZ * f5);
      GlStateManager.scale(0.68, 0.7, 0.7);
      GlStateManager.translate(-this.staf2.offsetX, -this.staf2.offsetY, -this.staf2.offsetZ);
      GlStateManager.translate(-this.staf2.rotationPointX * f5, -this.staf2.rotationPointY * f5, -this.staf2.rotationPointZ * f5);
      this.staf2.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.staf2_1.offsetX, this.staf2_1.offsetY, this.staf2_1.offsetZ);
      GlStateManager.translate(this.staf2_1.rotationPointX * f5, this.staf2_1.rotationPointY * f5, this.staf2_1.rotationPointZ * f5);
      GlStateManager.scale(0.66, 0.7, 0.7);
      GlStateManager.translate(-this.staf2_1.offsetX, -this.staf2_1.offsetY, -this.staf2_1.offsetZ);
      GlStateManager.translate(-this.staf2_1.rotationPointX * f5, -this.staf2_1.rotationPointY * f5, -this.staf2_1.rotationPointZ * f5);
      this.staf2_1.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.staf.offsetX, this.staf.offsetY, this.staf.offsetZ);
      GlStateManager.translate(this.staf.rotationPointX * f5, this.staf.rotationPointY * f5, this.staf.rotationPointZ * f5);
      GlStateManager.scale(0.7, 0.75, 0.7);
      GlStateManager.translate(-this.staf.offsetX, -this.staf.offsetY, -this.staf.offsetZ);
      GlStateManager.translate(-this.staf.rotationPointX * f5, -this.staf.rotationPointY * f5, -this.staf.rotationPointZ * f5);
      this.staf.render(f5);
      GlStateManager.popMatrix();
      AbstractMobModel.light(200, false);
      this.shape.render(f5);
      this.pike2.render(f5);
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.pike.offsetX, this.pike.offsetY, this.pike.offsetZ);
      GlStateManager.translate(this.pike.rotationPointX * f5, this.pike.rotationPointY * f5, this.pike.rotationPointZ * f5);
      GlStateManager.scale(0.65, 0.8, 0.65);
      GlStateManager.translate(-this.pike.offsetX, -this.pike.offsetY, -this.pike.offsetZ);
      GlStateManager.translate(-this.pike.rotationPointX * f5, -this.pike.rotationPointY * f5, -this.pike.rotationPointZ * f5);
      this.pike.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.crystal_4.offsetX, this.crystal_4.offsetY, this.crystal_4.offsetZ);
      GlStateManager.translate(this.crystal_4.rotationPointX * f5, this.crystal_4.rotationPointY * f5, this.crystal_4.rotationPointZ * f5);
      GlStateManager.scale(0.7, 0.7, 0.7);
      GlStateManager.translate(-this.crystal_4.offsetX, -this.crystal_4.offsetY, -this.crystal_4.offsetZ);
      GlStateManager.translate(-this.crystal_4.rotationPointX * f5, -this.crystal_4.rotationPointY * f5, -this.crystal_4.rotationPointZ * f5);
      this.crystal_4.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.crystal_1.offsetX, this.crystal_1.offsetY, this.crystal_1.offsetZ);
      GlStateManager.translate(this.crystal_1.rotationPointX * f5, this.crystal_1.rotationPointY * f5, this.crystal_1.rotationPointZ * f5);
      GlStateManager.scale(0.7, 0.7, 0.7);
      GlStateManager.translate(-this.crystal_1.offsetX, -this.crystal_1.offsetY, -this.crystal_1.offsetZ);
      GlStateManager.translate(-this.crystal_1.rotationPointX * f5, -this.crystal_1.rotationPointY * f5, -this.crystal_1.rotationPointZ * f5);
      this.crystal_1.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.crystal_2.offsetX, this.crystal_2.offsetY, this.crystal_2.offsetZ);
      GlStateManager.translate(this.crystal_2.rotationPointX * f5, this.crystal_2.rotationPointY * f5, this.crystal_2.rotationPointZ * f5);
      GlStateManager.scale(0.7, 0.7, 0.7);
      GlStateManager.translate(-this.crystal_2.offsetX, -this.crystal_2.offsetY, -this.crystal_2.offsetZ);
      GlStateManager.translate(-this.crystal_2.rotationPointX * f5, -this.crystal_2.rotationPointY * f5, -this.crystal_2.rotationPointZ * f5);
      this.crystal_2.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.crystal.offsetX, this.crystal.offsetY, this.crystal.offsetZ);
      GlStateManager.translate(this.crystal.rotationPointX * f5, this.crystal.rotationPointY * f5, this.crystal.rotationPointZ * f5);
      GlStateManager.scale(0.7, 0.7, 0.7);
      GlStateManager.translate(-this.crystal.offsetX, -this.crystal.offsetY, -this.crystal.offsetZ);
      GlStateManager.translate(-this.crystal.rotationPointX * f5, -this.crystal.rotationPointY * f5, -this.crystal.rotationPointZ * f5);
      this.crystal.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.crystal_5.offsetX, this.crystal_5.offsetY, this.crystal_5.offsetZ);
      GlStateManager.translate(this.crystal_5.rotationPointX * f5, this.crystal_5.rotationPointY * f5, this.crystal_5.rotationPointZ * f5);
      GlStateManager.scale(0.7, 0.7, 0.7);
      GlStateManager.translate(-this.crystal_5.offsetX, -this.crystal_5.offsetY, -this.crystal_5.offsetZ);
      GlStateManager.translate(-this.crystal_5.rotationPointX * f5, -this.crystal_5.rotationPointY * f5, -this.crystal_5.rotationPointZ * f5);
      this.crystal_5.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.crystal_3.offsetX, this.crystal_3.offsetY, this.crystal_3.offsetZ);
      GlStateManager.translate(this.crystal_3.rotationPointX * f5, this.crystal_3.rotationPointY * f5, this.crystal_3.rotationPointZ * f5);
      GlStateManager.scale(0.7, 0.7, 0.7);
      GlStateManager.translate(-this.crystal_3.offsetX, -this.crystal_3.offsetY, -this.crystal_3.offsetZ);
      GlStateManager.translate(-this.crystal_3.rotationPointX * f5, -this.crystal_3.rotationPointY * f5, -this.crystal_3.rotationPointZ * f5);
      this.crystal_3.render(f5);
      GlStateManager.popMatrix();
      AbstractMobModel.returnlight();
   }

   public void setRotateAngle(ModelRenderer modelRenderer, float x, float y, float z) {
      modelRenderer.rotateAngleX = x;
      modelRenderer.rotateAngleY = y;
      modelRenderer.rotateAngleZ = z;
   }
}
