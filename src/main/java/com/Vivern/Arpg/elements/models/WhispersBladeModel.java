//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Admin\Desktop\stuff\asbtractrpg\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

package com.Vivern.Arpg.elements.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;

public class WhispersBladeModel extends ModelBase {
   public ModelRenderer shapeG1;
   public ModelRenderer staf1;
   public ModelRenderer staf2;
   public ModelRenderer staf3;
   public ModelRenderer shapeG2;
   public ModelRenderer shapeG3;
   public ModelRenderer shapeG4;
   public ModelRenderer shapeG5;
   public ModelRenderer blade1;
   public ModelRenderer blade2;
   public ModelRenderer blade3;
   public ModelRenderer gem;

   public WhispersBladeModel() {
      this.textureWidth = 20;
      this.textureHeight = 32;
      this.shapeG1 = new ModelRenderer(this, 6, 0);
      this.shapeG1.setRotationPoint(0.0F, 6.0F, 5.0F);
      this.shapeG1.addBox(-1.0F, -1.0F, -2.0F, 2, 2, 4, 0.0F);
      this.shapeG3 = new ModelRenderer(this, 6, 6);
      this.shapeG3.setRotationPoint(0.0F, 5.4F, 3.3F);
      this.shapeG3.addBox(-0.5F, -0.5F, -2.0F, 1, 1, 2, 0.0F);
      this.setRotateAngle(this.shapeG3, (float) (Math.PI / 4), 0.0F, 0.0F);
      this.blade3 = new ModelRenderer(this, 6, 22);
      this.blade3.setRotationPoint(0.0F, -13.96F, 4.25F);
      this.blade3.addBox(-0.5F, -6.0F, -2.0F, 1, 6, 2, 0.0F);
      this.setRotateAngle(this.blade3, -1.0752974F, 0.0F, 0.0F);
      this.blade2 = new ModelRenderer(this, 0, 0);
      this.blade2.setRotationPoint(0.0F, -4.8F, 4.3F);
      this.blade2.addBox(-0.5F, -10.0F, -1.0F, 1, 10, 2, 0.0F);
      this.setRotateAngle(this.blade2, -0.045553092F, 0.0F, 0.0F);
      this.shapeG5 = new ModelRenderer(this, 14, 0);
      this.shapeG5.setRotationPoint(0.0F, 7.0F, 2.0F);
      this.shapeG5.addBox(-0.5F, -0.5F, -0.5F, 1, 2, 1, 0.0F);
      this.staf2 = new ModelRenderer(this, 10, 19);
      this.staf2.setRotationPoint(0.0F, 16.3F, 3.5F);
      this.staf2.addBox(-0.5F, 0.0F, -1.0F, 1, 1, 3, 0.0F);
      this.setRotateAngle(this.staf2, 0.31869712F, 0.0F, 0.0F);
      this.shapeG2 = new ModelRenderer(this, 6, 9);
      this.shapeG2.setRotationPoint(0.0F, 5.6F, 6.7F);
      this.shapeG2.addBox(-1.0F, -0.5F, 0.0F, 2, 1, 2, 0.0F);
      this.setRotateAngle(this.shapeG2, (float) (Math.PI / 4), 0.0F, 0.0F);
      this.gem = new ModelRenderer(this, 6, 19);
      this.gem.setRotationPoint(0.0F, 6.0F, 5.0F);
      this.gem.addBox(-1.0F, -0.5F, -0.5F, 2, 1, 1, 0.0F);
      this.setRotateAngle(this.gem, (float) (Math.PI / 4), 0.0F, 0.0F);
      this.blade1 = new ModelRenderer(this, 0, 12);
      this.blade1.setRotationPoint(0.0F, 5.0F, 5.0F);
      this.blade1.addBox(-0.5F, -10.0F, -1.0F, 1, 10, 2, 0.0F);
      this.setRotateAngle(this.blade1, 0.06981317F, 0.0F, 0.0F);
      this.staf3 = new ModelRenderer(this, 6, 12);
      this.staf3.setRotationPoint(0.0F, 7.0F, 5.0F);
      this.staf3.addBox(-0.5F, 0.0F, -1.0F, 1, 5, 2, 0.0F);
      this.shapeG4 = new ModelRenderer(this, 14, 6);
      this.shapeG4.setRotationPoint(0.0F, 4.1F, 8.0F);
      this.shapeG4.addBox(-0.5F, -1.5F, -0.5F, 1, 2, 1, 0.0F);
      this.staf1 = new ModelRenderer(this, 12, 12);
      this.staf1.setRotationPoint(0.0F, 12.2F, 5.1F);
      this.staf1.addBox(-0.5F, 0.0F, -1.0F, 1, 5, 2, 0.0F);
      this.setRotateAngle(this.staf1, -0.27314404F, 0.0F, 0.0F);
   }

   public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.shapeG1.offsetX, this.shapeG1.offsetY, this.shapeG1.offsetZ);
      GlStateManager.translate(this.shapeG1.rotationPointX * f5, this.shapeG1.rotationPointY * f5, this.shapeG1.rotationPointZ * f5);
      GlStateManager.scale(0.8, 1.0, 1.0);
      GlStateManager.translate(-this.shapeG1.offsetX, -this.shapeG1.offsetY, -this.shapeG1.offsetZ);
      GlStateManager.translate(-this.shapeG1.rotationPointX * f5, -this.shapeG1.rotationPointY * f5, -this.shapeG1.rotationPointZ * f5);
      this.shapeG1.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.shapeG3.offsetX, this.shapeG3.offsetY, this.shapeG3.offsetZ);
      GlStateManager.translate(this.shapeG3.rotationPointX * f5, this.shapeG3.rotationPointY * f5, this.shapeG3.rotationPointZ * f5);
      GlStateManager.scale(1.05, 1.0, 1.0);
      GlStateManager.translate(-this.shapeG3.offsetX, -this.shapeG3.offsetY, -this.shapeG3.offsetZ);
      GlStateManager.translate(-this.shapeG3.rotationPointX * f5, -this.shapeG3.rotationPointY * f5, -this.shapeG3.rotationPointZ * f5);
      this.shapeG3.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.blade3.offsetX, this.blade3.offsetY, this.blade3.offsetZ);
      GlStateManager.translate(this.blade3.rotationPointX * f5, this.blade3.rotationPointY * f5, this.blade3.rotationPointZ * f5);
      GlStateManager.scale(0.5, 0.5, 0.5);
      GlStateManager.translate(-this.blade3.offsetX, -this.blade3.offsetY, -this.blade3.offsetZ);
      GlStateManager.translate(-this.blade3.rotationPointX * f5, -this.blade3.rotationPointY * f5, -this.blade3.rotationPointZ * f5);
      this.blade3.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.blade2.offsetX, this.blade2.offsetY, this.blade2.offsetZ);
      GlStateManager.translate(this.blade2.rotationPointX * f5, this.blade2.rotationPointY * f5, this.blade2.rotationPointZ * f5);
      GlStateManager.scale(0.51, 1.0, 1.0);
      GlStateManager.translate(-this.blade2.offsetX, -this.blade2.offsetY, -this.blade2.offsetZ);
      GlStateManager.translate(-this.blade2.rotationPointX * f5, -this.blade2.rotationPointY * f5, -this.blade2.rotationPointZ * f5);
      this.blade2.render(f5);
      GlStateManager.popMatrix();
      this.shapeG5.render(f5);
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.staf2.offsetX, this.staf2.offsetY, this.staf2.offsetZ);
      GlStateManager.translate(this.staf2.rotationPointX * f5, this.staf2.rotationPointY * f5, this.staf2.rotationPointZ * f5);
      GlStateManager.scale(1.0, 0.9, 0.9);
      GlStateManager.translate(-this.staf2.offsetX, -this.staf2.offsetY, -this.staf2.offsetZ);
      GlStateManager.translate(-this.staf2.rotationPointX * f5, -this.staf2.rotationPointY * f5, -this.staf2.rotationPointZ * f5);
      this.staf2.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.shapeG2.offsetX, this.shapeG2.offsetY, this.shapeG2.offsetZ);
      GlStateManager.translate(this.shapeG2.rotationPointX * f5, this.shapeG2.rotationPointY * f5, this.shapeG2.rotationPointZ * f5);
      GlStateManager.scale(0.75, 1.0, 1.0);
      GlStateManager.translate(-this.shapeG2.offsetX, -this.shapeG2.offsetY, -this.shapeG2.offsetZ);
      GlStateManager.translate(-this.shapeG2.rotationPointX * f5, -this.shapeG2.rotationPointY * f5, -this.shapeG2.rotationPointZ * f5);
      this.shapeG2.render(f5);
      GlStateManager.popMatrix();
      AbstractMobModel.light(140, true);
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.gem.offsetX, this.gem.offsetY, this.gem.offsetZ);
      GlStateManager.translate(this.gem.rotationPointX * f5, this.gem.rotationPointY * f5, this.gem.rotationPointZ * f5);
      GlStateManager.scale(1.1, 1.1, 1.1);
      GlStateManager.translate(-this.gem.offsetX, -this.gem.offsetY, -this.gem.offsetZ);
      GlStateManager.translate(-this.gem.rotationPointX * f5, -this.gem.rotationPointY * f5, -this.gem.rotationPointZ * f5);
      this.gem.render(f5);
      GlStateManager.popMatrix();
      AbstractMobModel.returnlight();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.blade1.offsetX, this.blade1.offsetY, this.blade1.offsetZ);
      GlStateManager.translate(this.blade1.rotationPointX * f5, this.blade1.rotationPointY * f5, this.blade1.rotationPointZ * f5);
      GlStateManager.scale(0.5, 1.0, 1.0);
      GlStateManager.translate(-this.blade1.offsetX, -this.blade1.offsetY, -this.blade1.offsetZ);
      GlStateManager.translate(-this.blade1.rotationPointX * f5, -this.blade1.rotationPointY * f5, -this.blade1.rotationPointZ * f5);
      this.blade1.render(f5);
      GlStateManager.popMatrix();
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.staf3.offsetX, this.staf3.offsetY, this.staf3.offsetZ);
      GlStateManager.translate(this.staf3.rotationPointX * f5, this.staf3.rotationPointY * f5, this.staf3.rotationPointZ * f5);
      GlStateManager.scale(1.0, 1.1, 1.0);
      GlStateManager.translate(-this.staf3.offsetX, -this.staf3.offsetY, -this.staf3.offsetZ);
      GlStateManager.translate(-this.staf3.rotationPointX * f5, -this.staf3.rotationPointY * f5, -this.staf3.rotationPointZ * f5);
      this.staf3.render(f5);
      GlStateManager.popMatrix();
      this.shapeG4.render(f5);
      GlStateManager.pushMatrix();
      GlStateManager.translate(this.staf1.offsetX, this.staf1.offsetY, this.staf1.offsetZ);
      GlStateManager.translate(this.staf1.rotationPointX * f5, this.staf1.rotationPointY * f5, this.staf1.rotationPointZ * f5);
      GlStateManager.scale(0.9, 0.9, 0.9);
      GlStateManager.translate(-this.staf1.offsetX, -this.staf1.offsetY, -this.staf1.offsetZ);
      GlStateManager.translate(-this.staf1.rotationPointX * f5, -this.staf1.rotationPointY * f5, -this.staf1.rotationPointZ * f5);
      this.staf1.render(f5);
      GlStateManager.popMatrix();
   }

   public void setRotateAngle(ModelRenderer modelRenderer, float x, float y, float z) {
      modelRenderer.rotateAngleX = x;
      modelRenderer.rotateAngleY = y;
      modelRenderer.rotateAngleZ = z;
   }
}
